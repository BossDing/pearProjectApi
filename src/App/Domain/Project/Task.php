<?phpnamespace App\Domain\Project;use function App\addLog;use function App\addProjectLog;use function App\addTaskLog;use App\Common\CommonDomain;use App\Common\Exception\WrongRequestException;use App\Domain\Team\Team;use App\Domain\Team\TeamUser;use App\Domain\User\User;use function App\getCurrentUser;use App\Model\Project\File;use App\Model\Project\TaskToTag;use function App\nowTime;use function App\pushNotice;use Exception;/** * 任务任务类 * * @author lws */class Task extends CommonDomain{    private static $Model = null;    public function __construct()    {        if (self::$Model == null) {            self::$Model = new \App\Model\Project\Task();        }    }    public function getList($param)    {        if (!is_array($param)) {            $param = get_object_vars($param);        }        if (isset($param['keyWord'])) {            $param['where']["name LIKE ? or `desc` LIKE ? "] = array("%" . $param['keyWord'] . "%", "%" . $param['keyWord'] . "%");        }        if (isset($param['pid'])) {            $param['where']['pid'] = $param['pid'];        } else {            $param['where']['pid'] = 0;        }        if ($param['task_type'] != 0) {            $param['where']["task_type  = ?"] = $param['task_type'];        }        $param['where']["status  != ?"] = array('closed');        $param['where']["deleted"] = "0";        // and status != "cancel" and status !="closed"        $param['where']['project'] = $param['project_id'];        $param['where']['task_state'] = 0;        $list_0 = self::$Model->getList($param);        $count = $list_0['count'];        $param['where']['task_state'] = 1;        $list_1 = self::$Model->getList($param);        $count += $list_1['count'];        $list = array_merge($list_0['list'], $list_1['list']);        $undone_list = array();        $done_list = array();        if ($list) {            $model_user = new \App\Model\User\User();            $domain_task_file = new \App\Domain\Project\File();            foreach ($list as &$item) {//                $task_info = $this->getInfo(array('id'=>$item['id']));//                $item = array_merge($item,$task_info);                $item['create_user_info'] = $model_user->getInfo(array('account' => $item['openedBy']));                $item['executor_user_info'] = $this->getTaskExecutorUser($item['id']);                $item['task_type_name'] = $this->getTaskType($item['task_type'], $item['project']);                $item['task_level_name'] = $this->getTaskLevel($item['pri']);                $item['task_execute_name'] = $this->getTaskExecuteStateName($item['execute_state']);                $item['task_execute'] = $this->getTaskExecuteState($item['execute_state']);                $item['task_level_show_type'] = $this->getTaskLevelShowType($item['pri']);                $item['task_tag_item_list'] = $this->getTaskTag($item['id']);                $item['has_file'] = false;                $item['has_content'] = false;                $item['has_comment'] = false;                $item['has_children'] = false;                $item['children_task'] = false;                $children_task = self::$Model->getListByWhere(array('pid' => $item['id']), '*', 'sort asc');                if ($children_task) {                    $item['has_children'] = true;                    $item['children_task'] = $children_task;                }                if ($item['desc']) {                    $item['has_content'] = true;                }                $file_info = $domain_task_file->getInfo(array('objectID' => $item['id'], 'objectType' => 'task'));                if ($file_info) {                    $item['has_file'] = true;                }                $task_log = new \App\Model\Project\TaskLog();                $task_comment = $task_log->getInfo(array('task_id' => $item['id'], 'log_type' => 'comment'));                if ($task_comment) {                    $item['has_comment'] = true;                }            }            unset($item);            foreach ($list as $item) {                if (!$item['task_state']) {                    $undone_list[] = $item;                } else {                    $done_list[] = $item;                }            }        }        return array('count' => $count, 'list' => $list, 'undone_list' => $undone_list, 'done_list' => $done_list);    }//    public function getListOverview($param)//    {//        if (!is_array($param)) {//            $param = get_object_vars($param);//        }//        if (isset($param['keyWord'])) {//            $param['where']["title LIKE ? or content LIKE ? "] = array("%" . $param['keyWord'] . "%","%" . $param['keyWord'] . "%");//        }//        if ($param['task_type'] != 0) {//            $param['where']["task_type  = ?"] = $param['task_type'];//        }//        if ($param['task_state'] != -1) {//            $param['where']['task_state'] = $param['task_state'];//        }//        $list = self::$Model->getList($param);//        $list['count'] = count($list['list']);//        if ($list['list']) {//            $model_user = new \App\Model\User\User();//            $domain_task_file = new TaskFile();//            foreach ($list['list'] as $key=>&$item) {////                $task_info = $this->getInfo(array('id'=>$item['id']));////                $item = array_merge($item,$task_info);//                $item['create_user_info'] = $model_user->get($item['create_user_id']);//                $item['executor_user_info'] = $this->getTaskExecutorUser($item['id']);//                if (!$item['executor_user_info']) {//                    unset($list['list'][$key]);//                    $list['count']--;//                    continue;//                }////                $item['task_type_name'] = $this->getTaskType($item['task_type']);//                $item['task_level_name'] = $this->getTaskLevel($item['task_level']);//                $item['task_execute_name'] = $this->getTaskExecuteStateName($item['execute_state']);//                $item['task_level_show_type'] = $this->getTaskLevelShowType($item['task_level']);//                $item['task_tag_item_list'] = $this->getTaskTag($item['task_tag']);//                $item['has_file'] = false;//                $item['has_content'] = false;//                if ($item['content']) {//                    $item['has_content'] = true;//                }//                $file_info = $domain_task_file->getInfo(array('task_id'=>$item['id']));//                if ($file_info) {//                    $item['has_file'] = true;//                }//            }//        }//        return $list;//    }    public function getListOverview($param)    {        if (!is_array($param)) {            $param = get_object_vars($param);        }        $domain_user = new User();        $domain_team = new Team();        $user_list = array();        if (!$param['team_id']) {            $param['team_id'] = 8;        }        if ($param['team_id']) {            if ($param['include_child'] == 1) {                $team_list = $domain_team->getNextTeam($param['team_id']);            } else {                $team_info = $domain_team->getInfo(array('id' => $param['team_id']));                $team_list[] = $team_info;            }            $team_user = array();            $domain_team_user = new TeamUser();            if ($team_list) {                foreach ($team_list as $team) {                    $team_user_list = $domain_team_user->getTeamUser(array('team_id' => $team['id'], 'page_size' => 100, 'page_num' => 1));                    $team_user = array_merge($team_user, $team_user_list['list']);                }                $user_list = $team_user;                $list = array();                $i = 0;                foreach ($user_list as $key => &$user) {                    $task_list = $this->getTaskForUser(array('user_id' => $user['id'], 'is_executor' => 1, 'state' => 0, 'order' => 't.id desc'));                    $user['task_count'] = count($task_list['list']);                    $user['task_list'] = array_slice($task_list['list'], 0, 5);//                    if ($key % 10 === 0 && $key > 0) {//                        $i++;//                    }                    $list[$user['team_id']][] = $user;                }            }        } else {            $user_list = $domain_user->getUserList(array('state' => '1', 'order' => 'id asc', 'page_size' => 100));            $user_list = $user_list['list'];            $list = array();            $i = 0;            foreach ($user_list as $key => &$user) {                $task_list = $this->getTaskForUser(array('user_id' => $user['id'], 'is_executor' => 1, 'state' => 0, 'order' => 't.id desc'));                $user['task_count'] = count($task_list['list']);                $user['task_list'] = array_slice($task_list['list'], 0, 5);                if ($key % 10 === 0 && $key > 0) {                    $i++;                }                $list[$i][] = $user;            }        }        return $list;    }    /**     * 获取任务执行人信息     * @param $task_id     * @return array|mixed     */    public function getTaskExecutorUser($task_id)    {        $model_task_user = new \App\Model\Project\TaskUser();        $model_user = new \App\Model\User\User();        $executor = $model_task_user->getInfo(array('task_id' => $task_id, 'is_executor' => 1), 'user_id,create_time');        $executor_time = $executor['create_time'];        $executor = $model_user->get($executor['user_id']);        $executor['executor_time'] = $executor_time;        return $executor;    }    public function getTaskForUser($param)    {        if (!is_array($param)) {            $param = get_object_vars($param);        }        $order = (!isset($param['order']) or $param['order'] == '') ? '' : ' ORDER BY ' . $param['order'];        $key_word = (!isset($param['keyWord']) or $param['keyWord'] == '') ? ' WHERE 1=1 ' : ' WHERE ( t.title like ' . "'%" . $param['keyWord'] . "%' OR t.content like " . "'%" . $param['keyWord'] . "%' )";        $prefix = \PhalApi\DI()->config->get('dbs.tables.__default__.prefix');        $params = array(':user_id' => $param['user_id']);        $sql = 'SELECT *,t.id as t_id,t.id as id '            . 'FROM ' . $prefix . 'task AS t '            . 'JOIN ' . $prefix . 'task_user AS tu '            . 'ON t.id = tu.task_id '            . $key_word            . ' AND tu.user_id = :user_id and t.deleted = "0" and status != "cancel" and status !="closed"';        if (isset($param['state']) and $param['state'] != -1) {            $sql .= 'AND t.task_state = :task_state ';            $params[':task_state'] = $param['state'];        }        if (isset($param['is_executor']) and $param['is_executor']) {            $sql .= 'AND tu.is_executor = 1 ';        }        if (isset($param['is_creator']) and $param['is_creator']) {            $model_user = new \App\Model\User\User();            $user_info = $model_user->get($param['user_id'], 'account');            $sql .= 'AND t.openedBy = :openedBy ';            $params[':openedBy'] = $user_info['account'];        }        if (isset($param['project_id']) and $param['project_id']) {            $sql .= 'AND t.project = :project_id ';            $params[':project_id'] = $param['project_id'];        }        if (isset($param['is_overdue']) and $param['is_overdue']) {            $sql .= 'AND t.end_time < :end_time AND t.end_time is not null';            $params[':end_time'] = nowTime();        }        $sql .= $order;        $lists = \PhalApi\DI()->notorm->notTable->queryRows($sql, $params);        $count = count($lists);        if ($lists) {            $model_user = new \App\Model\User\User();            $model_project = new \App\Model\Project\Project();            foreach ($lists as &$item) {                $item['create_user_info'] = $model_user->getInfo(array('account' => $item['openedBy']));                $item['executor_user_info'] = $this->getTaskExecutorUser($item['id']);                $item['task_type_name'] = $this->getTaskType($item['task_type'], $item['project']);                $item['task_level_name'] = $this->getTaskLevel($item['pri']);                $item['task_execute_name'] = $this->getTaskExecuteStateName($item['execute_state']);                $item['task_execute'] = $this->getTaskExecuteState($item['execute_state']);                $item['task_tag_item_list'] = $this->getTaskTag($item['task_tag']);                $item['task_level_show_type'] = $this->getTaskLevelShowType($item['pri']);                $item['project_info'] = $model_project->get($item['project']);            }            unset($item);        }        $list = array('list' => $lists, 'count' => $count);        return $list;    }    public function getTaskForUserGroupByProject($param)    {        if (!is_array($param)) {            $param = get_object_vars($param);        }        $order = $param['order'] == '' ? '' : ' ORDER BY ' . $param['order'];        $key_word = $param['keyWord'] == '' ? ' WHERE 1=1 ' : ' WHERE ( t.title like ' . "'%" . $param['keyWord'] . "%' OR t.content like " . "'%" . $param['keyWord'] . "%' )";        $prefix = \PhalApi\DI()->config->get('dbs.tables.__default__.prefix');        $params = array(':user_id' => $param['user_id']);        $sql = 'SELECT *,t.id as t_id,t.id as id '            . 'FROM ' . $prefix . 'task AS t '            . 'JOIN ' . $prefix . 'task_user AS tu '            . 'ON t.id = tu.task_id '            . $key_word            . ' AND tu.user_id = :user_id and t.deleted = "0" and status != "cancel" and status !="closed"';        if (isset($param['state']) and $param['state'] != -1) {            $sql .= 'AND t.task_state = :task_state ';            $params[':task_state'] = $param['state'];        }        if ($param['is_executor']) {            $sql .= 'AND tu.is_executor = 1 ';        }        if ($param['is_creator']) {            $model_user = new \App\Model\User\User();            $user_info = $model_user->get($param['user_id'], 'account');            $sql .= 'AND t.openedBy = :openedBy ';            $params[':openedBy'] = $user_info['account'];        }        if ($param['project_id']) {            $sql .= 'AND t.project = :project_id ';            $params[':project_id'] = $param['project_id'];        }        if ($param['is_overdue']) {            $sql .= 'AND t.end_time < :end_time AND t.end_time is not null ';            $params[':end_time'] = nowTime();        }        if ($param['opened_time']) {            $sql .= 'AND (t.openedDate >= :opened_time ) ';            $params[':opened_time'] = $param['opened_time'];        }        $sql .= 'group by t.project ';        $sql .= $order;//        var_dump($sql,$params);die;        $lists = \PhalApi\DI()->notorm->notTable->queryRows($sql, $params);        $count = count($lists);        if ($lists) {            $model_user = new \App\Model\User\User();            $model_project = new \App\Model\Project\Project();            foreach ($lists as &$item) {                $item['create_user_info'] = $model_user->getInfo(array('account' => $item['openedBy']));                $item['executor_user_info'] = $this->getTaskExecutorUser($item['id']);                $item['task_type_name'] = $this->getTaskType($item['task_type']);                $item['task_level_name'] = $this->getTaskLevel($item['pri']);                $item['task_execute_name'] = $this->getTaskExecuteStateName($item['execute_state']);                $item['task_execute'] = $this->getTaskExecuteState($item['execute_state']);                $item['task_tag_item_list'] = $this->getTaskTag($item['task_tag']);                $item['task_level_show_type'] = $this->getTaskLevelShowType($item['pri']);                $item['project_info'] = $model_project->get($item['project']);            }            unset($item);        }        $list = array('list' => $lists, 'count' => $count);        return $list;    }    /**     *  获取团队任务统计     * @param $team_id     * @param string $type     * @return array     * @throws \PhalApi\Exception\BadRequestException     * @throws WrongRequestException     */    public function getTaskStatisticsByTeam($team_id = 0, $type = 'week')    {        if (!$team_id) {            $domain_team = new Team();            $current_user = getCurrentUser();            $team_list = $domain_team->getUserTeam($current_user['id']);            if ($team_list) {                $team_id = $team_list[0]['team_id'];            }        }        if (!$team_id) {            throw new WrongRequestException('该团队不存在或尚未加入任何团队', 1);        }        //RIGHT JOIN (SELECT MAX(id) AS id FROM pms_task GROUP BY id) AS t2 ON t.id = t2.id        $sql = "SELECT *,t.openedDate AS openedDate,t.id AS id FROM pms_task_user AS tu JOIN pms_user AS u ON tu.user_id = u.id JOIN pms_task AS t ON tu.task_id = t.id JOIN pms_team_user AS teu ON teu.user_id = u.id WHERE teu.team_id = :team_id ";        $params = array(':team_id' => $team_id);        if ($type == 'week') {            $week = \Time_Time::week();            $sql .= " and t.openedDate <= :end_week_time and t.openedDate >= :begin_week_time ";            $params[':end_week_time'] = date('Y-m-d', $week[1]);            $params[':begin_week_time'] = date('Y-m-d', $week[0]);        } else if ($type == 'month') {            $month = \Time_Time::month();            $sql .= " and t.openedDate <= :end_month_time and t.openedDate >= :begin_month_time ";            $params[':end_month_time'] = date('Y-m-d', $month[1]);            $params[':begin_month_time'] = date('Y-m-d', $month[0]);        }        $sql .= " group by t.id";        $list = \PhalApi\DI()->notorm->notTable->queryRows($sql, $params);        $task_type_list = $this->getTaskTypeList();        $task_type_list[]['name'] = '总量';        $task_type_list_format = array();        foreach ($task_type_list as $key => $task_type) {            $task_type_list_format[] = $task_type['name'];        }        $data = array();        if ($type == 'week') {            $day_num = 7;            $field = array('周一', '周二', '周三', '周四', '周五', '周六', '周日');            $begin = \Time_Time::week();        } else if ($type == 'month') {            $day_num = date('t');            $field = array();            $begin = \Time_Time::month();            $today = date('d', time());            for ($i = 0; $i < $today; $i++) {                $current_time = date('Y-m-d', $begin[0] + (3600 * 24 * $i));                $field[] = $current_time;            }        }        foreach ($task_type_list as $key => $task_type) {            $detail = array();            $detail['name'] = $task_type['name'];            $detail['type'] = 'line';            $detail['smooth'] = true;            $detail['data'] = array();            $begin_time = $begin[0];            for ($i = 0; $i < $day_num; $i++) {                $current_time = date('Y-m-d', $begin_time + (3600 * 24 * ($i + 1)));                $last_time = date('Y-m-d', $begin_time + (3600 * 24 * $i));                foreach ($list as $item) {                    if (!isset($detail['data'][$i]) or !$detail['data'][$i]) {                        $detail['data'][$i] = 0;                    }                    if ($item['openedDate'] >= $last_time and $item['openedDate'] <= $current_time) {                        if ($task_type['name'] == '总量') {                            $detail['data'][$i]++;                        } else {                            if ($item['task_type'] == $task_type['key']) {                                $detail['data'][$i]++;                            }                        }                    }                }//                $last_time = strtotime($current_time);            }            $data[$key] = $detail;        }//        echo json_encode($data);die;        return array('task_type_list' => $task_type_list_format, 'field' => $field, 'data' => $data, 'list' => $list);    }    public function getTaskStatisticsByAll($type = 'week')    {        $model_task = new \App\Model\Project\Task();        //RIGHT JOIN (SELECT MAX(id) AS id FROM pms_task GROUP BY id) AS t2 ON t.id = t2.id        $sql = "SELECT *,t.openedDate AS openedDate,t.id AS id FROM pms_task AS t  WHERE t.deleted = '0'";        $params = array();        if ($type == 'week') {            $week = \Time_Time::week();            $sql .= " and t.openedDate <= :end_week_time and t.openedDate >= :begin_week_time ";            $params[':end_week_time'] = date('Y-m-d', $week[1]);            $params[':begin_week_time'] = date('Y-m-d', $week[0]);        } else if ($type == 'month') {            $month = \Time_Time::month();            $sql .= " and t.openedDate <= :end_month_time and t.openedDate >= :begin_month_time ";            $params[':end_month_time'] = date('Y-m-d', $month[1]);            $params[':begin_month_time'] = date('Y-m-d', $month[0]);        }        $sql .= " group by t.id";        $list = \PhalApi\DI()->notorm->notTable->queryRows($sql, $params);//        $task_type_list = $this->getTaskTypeList();        $task_type_list[]['name'] = '总量';        $task_type_list_format = array();        foreach ($task_type_list as $key => $task_type) {            $task_type_list_format[] = $task_type['name'];        }        $data = array();        if ($type == 'week') {            $day_num = 7;            $field = array('周一', '周二', '周三', '周四', '周五', '周六', '周日');            $begin = \Time_Time::week();        } else if ($type == 'month') {            $day_num = date('t');            $field = array();            $begin = \Time_Time::month();            $today = date('d', time());            for ($i = 0; $i < $today; $i++) {                $current_time = date('Y-m-d', $begin[0] + (3600 * 24 * $i));                $field[] = $current_time;            }        }        foreach ($task_type_list as $key => $task_type) {            $detail = array();            $detail['areaStyle'] = array('color' => '#975fe4');            $detail['itemStyle'] = array('color' => '#975fe4');            $detail['name'] = $task_type['name'];            $detail['type'] = 'line';            $detail['smooth'] = true;            $detail['data'] = array();            $begin_time = $begin[0];            for ($i = 0; $i < $day_num; $i++) {                $current_time = date('Y-m-d', $begin_time + (3600 * 24 * ($i + 1)));                $last_time = date('Y-m-d', $begin_time + (3600 * 24 * $i));                foreach ($list as $item) {                    if (!isset($detail['data'][$i]) or !$detail['data'][$i]) {                        $detail['data'][$i] = 0;                    }                    if ($item['openedDate'] >= $last_time and $item['openedDate'] <= $current_time) {                        if ($task_type['name'] == '总量') {                            $detail['data'][$i]++;                        } else {                            if ($item['task_type'] == $task_type['key']) {                                $detail['data'][$i]++;                            }                        }                    }                    $detail['data'][$i] = rand(1, 100);                }//                $last_time = strtotime($current_time);            }            $data[$key] = $detail;        }//        echo json_encode($data);die;        $total = $model_task->getCount(array('deleted' => "0"));        $day = \Time_Time::today();        $today_total = $model_task->getCount(array('deleted' => "0", 'openedDate >= ? ' => array(date('Y-m-d', $day[0]))));        return array('task_type_list' => $task_type_list_format, 'field' => $field, 'data' => $data, 'list' => $list, 'total' => number_format($total), 'today_total' => $today_total);    }    public function getInfo($where, $field = '*')    {        $model_user = new \App\Model\User\User();        $model_project = new \App\Model\Project\Project();        $domain_task_file = new \App\Domain\Project\File();        $model_task_type = new \App\Model\Project\TaskType();        $task_info = self::$Model->getInfo($where, $field);        $task_info['project_info'] = $model_project->get($task_info['project']);        $task_info['create_user_info'] = $model_user->getInfo(array('account' => $task_info['openedBy']));        $task_info['executor_user_info'] = $this->getTaskExecutorUser($task_info['id']);        $task_type = $model_task_type->getInfo(array('id' => $task_info['task_type']));        $task_info['task_type_name'] = $task_type['name'];        $task_info['task_level_name'] = $this->getTaskLevel($task_info['pri']);        $task_info['task_execute_name'] = $this->getTaskExecuteStateName($task_info['execute_state']);        $task_info['task_execute'] = $this->getTaskExecuteState($task_info['execute_state']);        $task_info['task_tag_item_list'] = $this->getTaskTag($task_info['id']);        $task_info['task_level_show_type'] = $this->getTaskLevelShowType($task_info['pri']);        $task_info['has_file'] = false;        $task_info['has_content'] = false;        $task_info['has_children'] = false;        $task_info['has_comment'] = false;        $task_info['children_task'] = false;        $task_info['parent_task'] = false;        if ($task_info['desc']) {            $task_info['has_content'] = true;        }        $file_info = $domain_task_file->getInfo(array('objectId' => $task_info['id'], 'objectType' => 'task'));        if ($file_info) {            $task_info['has_file'] = true;        }        $children_task = self::$Model->getListByWhere(array('pid' => $task_info['id']), '*', 'sort asc');        if ($children_task) {            $task_info['has_children'] = true;            foreach ($children_task as &$task) {                $task = $this->getInfo(array('id' => $task['id']));            }            unset($task);            $task_info['children_task'] = $children_task;        }        if ($task_info['pid'] > 0) {            $task_info['parent_task'] = self::$Model->getInfo(array('id' => $task_info['pid']), $field);        }        $task_log = new \App\Model\Project\TaskLog();        $task_comment = $task_log->getInfo(array('task_id' => $task_info['id'], 'log_type' => 'comment'));        if ($task_comment) {            $task_info['has_comment'] = true;        }        return $task_info;    }    /**     *  获取任务日志     * @param $task_id     * @param bool $show_all 是否获取全部     * @return array     */    public function getTaskLog($task_id, $show_all = false)    {        $model_task_log = new TaskLog();        if ($show_all) {            $lists = $model_task_log->getList(array('where' => array('task_id' => $task_id), 'order' => 'id desc', 'page_size' => 100));        } else {            $lists = $model_task_log->getList(array('where' => array('task_id' => $task_id), 'page_size' => 5, 'order' => 'id desc'));        }        if ($lists['list']) {            $lists['list'] = array_reverse($lists['list']);        }        return $lists;    }    /**     * 任务状态列表     * @return array     */    public function getTaskStateList()    {        //'wait','doing','done','pause','cancel','closed'        $state = array();        $state[] = array('name' => '未开始', 'key' => '0', 'code' => 'wait');        $state[] = array('name' => '已完成', 'key' => '1', 'code' => 'done');        $state[] = array('name' => '进行中', 'key' => '2', 'code' => 'doing');        $state[] = array('name' => '已暂停', 'key' => '3', 'code' => 'pause');        $state[] = array('name' => '已取消', 'key' => '4', 'code' => 'cancel');        $state[] = array('name' => '已关闭', 'key' => '5', 'code' => 'closed');        return $state;    }    /**     * 获取任务状态     * @param $key     * @return mixed     */    public function getTaskState($key)    {        $task_list = $this->getTaskStateList();        foreach ($task_list as $item) {            if ($item['key'] == $key) {                return $item;            }        }    }    /**     * 任务类型列表     * @return array     */    public function getTaskTypeList()    {        $type = array();        $type[] = array('name' => '待办', 'key' => '1', 'list' => array(), 'show_card' => false, 'fixed_creator' => false);        $type[] = array('name' => '需求', 'key' => '6', 'list' => array(), 'show_card' => false, 'fixed_creator' => false);//        $type[] = array('name' => '修改', 'key' => '2', 'list' => array(), 'show_card' => false, 'fixed_creator' => false);        $type[] = array('name' => '新增', 'key' => '3', 'list' => array(), 'show_card' => false, 'fixed_creator' => false);        $type[] = array('name' => '问题', 'key' => '4', 'list' => array(), 'show_card' => false, 'fixed_creator' => false);        $type[] = array('name' => '其他', 'key' => '5', 'list' => array(), 'show_card' => false, 'fixed_creator' => false);        return $type;    }    /**     * 任务优先级列表     * @return array     */    public function getTaskLevelList()    {        $type = array();        $type[] = array('name' => '普通', 'key' => '4', 'list' => array(), 'show_type' => 'dashed');        $type[] = array('name' => '一般', 'key' => '3', 'list' => array(), 'show_type' => 'default');        $type[] = array('name' => '紧急', 'key' => '2', 'list' => array(), 'show_type' => 'warning');        $type[] = array('name' => '非常紧急', 'key' => '1', 'list' => array(), 'show_type' => 'error');        return $type;    }    /**     * 任务执行状态     * @return array     */    public function getTaskExecuteStateList()    {        $type = array();        $type[] = array('name' => '未开始', 'key' => '0', 'code' => 'wait', 'task_code' => 'wait', 'color' => 'default');        $type[] = array('name' => '进行中', 'key' => '1', 'code' => 'doing', 'task_code' => 'doing', 'color' => 'success');        $type[] = array('name' => '已暂停', 'key' => '2', 'code' => 'paused', 'task_code' => 'pause', 'color' => 'warning');        $type[] = array('name' => '已取消', 'key' => '3', 'code' => 'canceled', 'task_code' => 'cancel', 'color' => 'danger');        $type[] = array('name' => '已关闭', 'key' => '4', 'code' => 'closed', 'task_code' => 'closed', 'color' => 'gray');        return $type;    }    /**     * 任务标签列表     * @param $project_id     * @return array     */    public function getTaskTagList($project_id)    {        $type = array();//        $type[] = array('name' => 'Web', 'key' => '1', 'color' => 'blue');//        $type[] = array('name' => 'IOS', 'key' => '2', 'color' => 'orange');//        $type[] = array('name' => 'Android', 'key' => '3', 'color' => 'red');//        $type[] = array('name' => 'All', 'key' => '4', 'color' => 'green');        $tag_model = new \App\Model\Project\TaskTag();        return $tag_model->getListByWhere(array('project' => $project_id));    }    /**     * 获取任务类型名称     * @param $key     * @return mixed     */    public function getTaskType($key, $proejct_id)    {        $task_type_model = new \App\Model\Project\TaskType();        $task_list = $task_type_model->getListByWhere(array('project' => $proejct_id));        foreach ($task_list as $item) {            if ($item['id'] == $key) {                return $item['name'];            }        }    }    /**     * 获取任务优先级     * @param $key     * @return mixed     */    public function getTaskLevel($key)    {        $task_list = $this->getTaskLevelList();        foreach ($task_list as $item) {            if ($item['key'] == $key) {                return $item['name'];            }        }    }    /**     * 获取执行状态名称     * @param $key     * @return mixed     */    public function getTaskExecuteStateName($key)    {        $task_list = $this->getTaskExecuteStateList();        foreach ($task_list as $item) {            if ($item['key'] == $key) {                return $item['name'];            }        }    }    /**     * 获取执行状态     * @param $key     * @return mixed     */    public function getTaskExecuteState($key)    {        $task_list = $this->getTaskExecuteStateList();        foreach ($task_list as $item) {            if ($item['key'] == $key) {                return $item;            }        }    }    /**     * 获取执行状态     * @param $code     * @return mixed     */    public function getTaskExecuteStateByCode($code)    {        $task_list = $this->getTaskExecuteStateList();        foreach ($task_list as $item) {            if ($item['code'] == $code) {                return $item;            }        }    }    /**     * 获取任务标签     * @param $keys     * @return mixed     */    public function getTaskTag($task_id)    {        $task_to_task_model = new TaskToTag();        $prefix = \PhalApi\DI()->config->get('dbs.tables.__default__.prefix');        $sql = 'SELECT * '            . 'FROM ' . $prefix . 'task_to_tag AS t '            . 'JOIN ' . $prefix . 'task_tag AS m '            . 'ON t.tag_id = m.id '            . ' AND t.task_id = :id';        $list = \PhalApi\DI()->notorm->notTable->queryRows($sql, array(':id' => $task_id));        return $list;//        $task_name_list = array();        return $task_name_list;    }    public function getTaskTagByName($name)    {        $task_list = $this->getTaskTagList();        foreach ($task_list as $item) {            if ($item['name'] == $name) {                return $item;            }        }    }    public function getTaskLevelShowType($key)    {        $task_list = $this->getTaskLevelList();        foreach ($task_list as $item) {            if ($item['key'] == $key) {                return $item['show_type'];            }        }    }    /** 删除任务     * @param $id id     * @return void     * @throws WrongRequestException     */    public function delTask($id)    {        \PhalApi\DI()->notorm->beginTransaction(DB_TICKET);        $task_info = self::$Model->get($id, 'project');        $result = self::$Model->delete($id);        if ($result !== false) {            addProjectLog("删除任务，ID：{$id}", $task_info['project']);            $model_task_user = new TaskUser();            $result = $model_task_user->deleteTaskUser($id);            if ($result === false) {                \PhalApi\DI()->notorm->rollback(DB_TICKET);            }            $result = self::$Model->deleteByWhere(array('pid' => $id));            if ($result === false) {                \PhalApi\DI()->notorm->rollback(DB_TICKET);            }            //todo 删除任务文件        } else {            \PhalApi\DI()->notorm->rollback(DB_TICKET);            throw new WrongRequestException('删除失败', 1);        }        \PhalApi\DI()->notorm->commit(DB_TICKET);    }    /**     *  新增任务     * @param $data     * @throws WrongRequestException     */    public function addTask($data)    {        \PhalApi\DI()->notorm->beginTransaction(DB_TICKET);        try {            $model_project = new \App\Model\Project\Project();            $current_user = getCurrentUser();            $project_id = $data['project'];            $project_info = $model_project->get($project_id);            if (!$project_info) {                throw new WrongRequestException('该项目不存在', 1);            }            if (!$data['executor_id']) {                $executor = $current_user;                $executor_id = $executor['id'];                $data['assignedTo'] = $executor['account'];            } else {                $executor_id = $data['executor_id'];                $model_user = new \App\Model\User\User();                $executor = $model_user->get($executor_id, 'account,realname,id');                $data['assignedTo'] = $executor['account'];            }            if (!$data['assignedTo']) {                throw new WrongRequestException('任务执行人不存在', 3);            }            unset($data['executor_id']);            $task_count = $data['task_count'];            $data['type'] = 'misc';            $data['openedDate'] = nowTime();            $data['openedBy'] = $executor['account'];            if ($task_count > 1) {                $task_titles = explode("\n", $data['name']);            } else {                $task_titles = array($data['name']);            }            foreach ($task_titles as $task_title) {                unset($data['task_count']);                $data['name'] = trim($task_title);                if (!$data['name']) {                    continue;                }                $id = self::$Model->insert($data);                self::$Model->update($id, array('sort' => $id));                if ($id === false) {                    throw new WrongRequestException('新增失败', 1);                }                $content = "创建了任务";                if ($data['pid']) {                    $parent = self::$Model->get($data['pid'], 'name');                    $parent_name = $parent['name'];                    $content = "在父任务 {$parent_name} 下创建了任务";                    addTaskLog('添加了子任务 "' . $data['name'] . '"', $data['pid'], 'child_task');                }                addTaskLog($content, $id, 'add', $data['name'], '');                $domain_task_user = new TaskUser();                $domain_task_user->addTaskUser($id, $executor_id);                if ($executor_id != $current_user['id']) {                    $domain_task_user->addTaskUser($id, $current_user['id']);                }            }            \PhalApi\DI()->notorm->commit(DB_TICKET);        } catch (Exception $exception) {            throw new WrongRequestException($exception->getMessage(), 2);            \PhalApi\DI()->notorm->rollback(DB_TICKET);        }    }//    public function addTaskUser($task_id,$user_id)//    {//        $log_data = array();//        $model_task_user = new \App\Model\Project\TaskUser();//        $task_user_info = $model_task_user->getInfo(array('user_id'=>$user_id,'task_id'=>$task_id));//        $modal_user = new \App\Model\User\User();//        $user_info = $modal_user->get($user_id,'nick_name');//        if ($task_user_info) {//            if (!$task_user_info['is_executor']) {//                $result = $model_task_user->delete($task_user_info['id']);//                $log_data['task_id'] = $task_id;//                $log_data['content'] = "将{$user_info['nick_name']}从任务中移除";//                $log_data['log_type'] = "remove_user";//                addTaskLog($log_data['content'],$log_data['task_id'],$log_data['log_type']);//            }else{//                $result = true;//            }//        }else{//            $task_user_data = array();//            $task_user_data['task_id'] = $task_id;//            $task_user_data['user_id'] = $user_id;//            $result = $model_task_user->insert($task_user_data);//            $log_data['task_id'] = $task_id;//            $log_data['content'] = "邀请{$user_info['nick_name']}加入任务";//            $log_data['log_type'] = "add_user";//            addTaskLog($log_data['content'],$log_data['task_id'],$log_data['log_type']);//        }//        if (!$result) {//            throw new WrongRequestException('操作失败', 1);//        }//    }    /**     * @param $task_id     * @param $memo     * @return \PhalApi\long     * @throws WrongRequestException     * @throws \PhalApi\Exception\BadRequestException     */    public function addTaskComment($task_id, $memo)    {        $data = array();        $memo = nl2br($memo);//回车换成换行        $user_info = getCurrentUser();        $user_id = $user_info['id'];        $data['task_id'] = $task_id;        $data['memo'] = $memo;        $data['user_id'] = $user_id;        $data['log_type'] = 'comment';        $data['is_comment'] = '1';        $data['create_time'] = nowTime();        $task_log_model = new \App\Model\Project\TaskLog();        $result = $task_log_model->insert($data);        if (!$result) {            throw new WrongRequestException('添加失败', 1);        }        return $result;    }    /**     * @param $id     * @param $memo     * @return TRUE     * @throws WrongRequestException     */    public function editTaskComment($id, $memo)    {        $task_log_model = new \App\Model\Project\TaskLog();        $comment = $task_log_model->getInfo($id);        if (!$comment) {            throw new WrongRequestException('该评论不存在', 1);        }        $result = $task_log_model->update($id, array('memo' => $memo));        if (!$result) {            throw new WrongRequestException('编辑失败', 2);        }        return $result;    }    /**     * @param $id     * @return TRUE     * @throws WrongRequestException     */    public function delTaskComment($id)    {        $task_log_model = new \App\Model\Project\TaskLog();        $comment = $task_log_model->getInfo($id);        if (!$comment) {            throw new WrongRequestException('该评论不存在', 1);        }        $result = $task_log_model->delete($id);        if (!$result) {            throw new WrongRequestException('删除失败', 2);        }        return $result;    }    /**     * @param $id     * @param $data     * @return bool     * @throws WrongRequestException     */    public function editTask($id, $data)    {        $task_info = self::$Model->get($id);        if (!$task_info) {            throw new WrongRequestException('该任务已失踪', 5);        }        $new_data = array();        $new_data['project'] = $task_info['project'];        if ($data['title']) {            if ($task_info['name'] != trim($data['title'])) {                $new_data['name'] = trim($data['title']);            }        }        if ($data['content']) {            $new_data['desc'] = $data['content'];        }        if ($data['begin_time']) {            $new_data['begin_time'] = $data['begin_time'] == 'null' ? null : $data['end_time'];        }        if ($data['end_time']) {            $new_data['end_time'] = $data['end_time'] == 'null' ? null : $data['end_time'];        }        if ($data['remind_time']) {            $new_data['remind_time'] = $data['remind_time'] == 'null' ? null : $data['remind_time'];            if (!$new_data['remind_time']) {                $new_data['is_pushed'] = 0;            }        }        if ($data['task_type']) {            $new_data['task_type'] = $data['task_type'];        }        if (isset($data['task_level'])) {            $new_data['pri'] = $data['task_level'];        }        if (isset($data['execute_state'])) {            $new_data['execute_state'] = $data['execute_state'];            $task_execute = $this->getTaskExecuteState($new_data['execute_state']);            $new_data['status'] = $task_execute['task_code'];        }        if (isset($data['task_tag'])) {            if ($data['task_tag']) {                $task_to_tag = new TaskToTag();                $task_to_tag->deleteByWhere(array('task_id' => $id));                foreach ($data['task_tag'] as $tag_id) {                    if (!$tag_id) {                        continue;                    }                    $insert_data = array(                        'task_id' => $id,                        'tag_id' => $tag_id,                        'create_time' => nowTime(),                    );                    $task_to_tag->insert($insert_data);                }            }            $new_data['task_tag'] = json_encode($data['task_tag']);        }        $result = self::$Model->update($id, $new_data);        if ($result === false) {            throw new WrongRequestException('保存失败', 6);        }        if (!$new_data) {            return false;        }        $domain_task_log = new TaskLog();        $new_data['task_id'] = $id;        $log_data = $domain_task_log->getLogContent($new_data);        addTaskLog($log_data['content'], $id, $log_data['log_type'], $log_data['memo']);    }    /**     * 标记任务完成状态     * @param $task_id     * @param $state     */    public function setTaskState($task_id, $state)    {        $task_state = $this->getTaskState($state);        $code = $task_state['code'];        $result = self::$Model->update($task_id, array('task_state' => $state, 'status' => $code));        if ($result) {            $task_info = $this->getInfo(array('id' => $task_id));            $project_id = $task_info['project'];            $all_task = self::$Model->getListByWhere(array('project' => $project_id), 'id');            $all_task = count($all_task);            $done_task = self::$Model->getListByWhere(array('project' => $project_id, 'task_state' => 1), 'id');            $project_model = new \App\Model\Project\Project();            $done_task = count($done_task);            if ($all_task) { //自动计算项目进度                $schedule = intval($done_task / $all_task * 100);                $project_model->update($project_id, array('schedule' => $schedule));            }            $domain_task_log = new TaskLog();            $log_data = $domain_task_log->getLogContent(array('task_state' => $state, 'task_id' => $task_id));            addTaskLog($log_data['content'], $task_id, $log_data['log_type'], $log_data['memo']);            if ($task_info['pid']) {                if ($log_data['log_type'] == 'done' or $log_data['log_type'] == 'again') {                    $content = $log_data['log_type'] == 'done' ? '完成了子任务 ' : '重做了子任务 ';                    $content .= '"' . $task_info['name'] . '"';                    addTaskLog($content, $task_info['pid'], 'child_task');                }            }        }    }    /**     * 任务排序     * @param $from_task_id     * @param $to_task_id     */    public function exchangeTaskSort($list)    {        if ($list and count($list) > 1) {            $sort_arr = $list;            sort($sort_arr);            foreach ($list as $key => $item) {                self::$Model->update($item, array('sort' => $sort_arr[$key]));            }        }    }    /* public function exchangeTaskSort($from_task_id, $to_task_id)     {         $from_task = self::$Model->get($from_task_id);         $to_task = self::$Model->get($to_task_id);         $from_task_sort = $from_task['sort'];         $to_task_sort = $to_task['sort'];         $task_type = $to_task['task_type'];         if ($from_task_sort > $to_task_sort) {             self::$Model->queryExecute("update pms_task set sort = sort + 1 where sort >= {$to_task_sort} and sort <= {$from_task_sort} and task_type = $task_type and task_state = 0");         } else {             self::$Model->queryExecute("update pms_task set sort = sort - 1 where sort <= {$to_task_sort} and sort >= {$from_task_sort}  and task_type = $task_type and task_state = 0");         }         self::$Model->update($from_task_id, array('sort' => $to_task_sort));     }*/    /**     * 删除项目内某类型的任务     * @param $project_id     * @param $type_id     * @return bool|int     */    public function delTypeTask($project_id, $type_id)    {        return self::$Model->updateByWhere(array('project' => $project_id, 'task_type' => $type_id), array('deleted' => '1'));    }    /**     * 批量设置项目内某类型的任务截止时间     * @param $project_id     * @param $type_id     * @param $end_time     * @return bool|int     */    public function setTypeTaskEndTime($project_id, $type_id, $end_time)    {        if (!$end_time) {            $end_time = null;        }        return self::$Model->updateByWhere(array('project' => $project_id, 'task_type' => $type_id), array('end_time' => $end_time));    }    /**     * 批量设置项目内某类型的执行者     * @param $project_id     * @param $type_id     * @param $end_time     * @return bool|int     * @throws WrongRequestException     * @throws \PhalApi\Exception\BadRequestException     */    public function setTypeTaskExecutor($project_id, $type_id, $user_id)    {        if (!$user_id) {            return false;        }        $model_user = new \App\Model\User\User();        $user_info = $model_user->get($user_id);        $domain_task_user = new TaskUser();        $model_task = new \App\Model\Project\Task();        $task_list = $model_task->getListByWhere(array('project' => $project_id, 'task_type' => $type_id));        if ($task_list) {            foreach ($task_list as $task) {                $domain_task_user->addTaskExecutorUser($task['id'], $user_id);            }        }        return $user_info;    }}